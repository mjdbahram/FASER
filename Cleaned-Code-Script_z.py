#!/usr/bin/env python
# coding: utf-8

# # Import python libraries

# In[57]:


import numpy as np
import matplotlib.pyplot as plt
import numba
import pandas as pd
import os
# from matplotlib import rc
# #rc('font',**{'family':'sans-serif','sans-serif':['Helvetica']})
# rc('text', usetex=True)


# In[58]:


mp = 0.13957018 #;//pion mass
mm = 0.10565837 #;//muon mass
mV = 0.01
mk = 0.493677


# In[59]:


def save2txt(mV, generic_file_name, data, out_put_dir = './wiz'):
    
    if os.path.exists(out_put_dir):
        pass
    else:
        os.mkdir(out_put_dir)
        
    file_path = os.path.join(out_put_dir, "mV=%.9f"%mV + "_" + generic_file_name + '.txt')
    np.savetxt(file_path, data)


# ## Cross section

# In[60]:


@numba.njit(parallel=True, fastmath = True)
def cross_section_nu_e_mu(energy):
    #energy unit is GeV
    energy_cr=np.array([10, 13.61712033, 16.88267217, 20.93276988, 25.95653661, 32.18762912, 39.91568313, 49.50060164, 61.39167106, 76.13792424,   94.42890272,  117.1180017 ,        145.25877065,  180.16521385,  223.46366569,  277.1694515 ,        343.7825322 ,  426.4194933 ,  528.91135821,  656.05996587,        813.77931622, 1009.44367379, 1252.17472687, 1553.29058784,1926.88274262, 2390.4521978 , 2965.5471937 , 3679.16571264, 4564.76605903, 5663.6651341 , 7027.62657598, 8550.91526802,10000])
    cross_section=np.array([11.19910969, 11.6997078 , 12.11847383, 12.47187905, 12.73978427,12.95091768, 13.13036951, 13.27673508, 13.33166113, 13.40832353,13.44939137, 13.44733754, 13.44528403, 13.41448502, 13.36228685,13.30317069, 13.24431607, 13.14345168, 13.06431273, 12.94402152,12.81797653, 12.65924061, 12.48241446, 12.29489197, 12.07136438,11.79495498, 11.52487478, 11.21287141, 10.85108938, 10.47852584,10.04860261,  9.64791918,  9.33727326])
    cross=energy+0.000001
            
    for i in np.arange(len(energy_cr)-1):
        c=(np.logical_and(energy >= energy_cr[i], energy < energy_cr[i+1]))
        cross[c]= cross_section[i]+(energy[c]-energy_cr[i])*(cross_section[i+1]-cross_section[i])/(energy_cr[i+1]-energy_cr[i])
    
    return cross * energy


# In[61]:


@numba.njit(parallel=True, fastmath = True)
def cross_section_anu_e_mu(energy):
    #energy unit is GeV
    energy_cr=np.array([10,16.41507263,20.64197028,24.97079972,33.30792999,43.14973334,57.73787762,73.86680177,97.90402127,130.76945654,152.33816963,202.93861021,276.64363405,426.59330127,  517.49094731,  997.0542374 ,       1315.06369799, 1579.78941578, 2288.44120219, 3004.89170686,3982.28857196, 4871.81965317, 6717.22112128, 8028.73966833,10001])
    cross_section=np.array([3.87428367, 4.27287335, 4.64600706, 4.86221614, 5.17117212,5.41952745, 5.64966911, 5.81398739, 5.90595206, 6.05967671, 6.07330428, 6.25344458, 6.32611259, 6.33348356, 6.42334739, 6.40777479, 6.42089967, 6.28121624, 6.25847806, 6.15635953, 6.10016502, 5.95234624, 5.86060292, 5.74374555, 5.74374555])
    cross=energy+0.000001
            
    for i in np.arange(len(energy_cr)-1):
        c=(np.logical_and(energy >= energy_cr[i], energy < energy_cr[i+1]))
        cross[c]= cross_section[i]+(energy[c]-energy_cr[i])*(cross_section[i+1]-cross_section[i])/(energy_cr[i+1]-energy_cr[i])
    
    return cross * energy;


# In[62]:


@numba.njit(parallel=True, fastmath = True)
def cross_section_nu_tau(energy):
    #energy unit is GeV
    energy_cr=np.array([  10 ,   11.27963503,   12.18142625,   13.28421217,14.62937168,   16.26958007,   18.45102278,   21.33869532, 24.92306789,   29.97594547,   37.13268375,   46.0061884 , 57.01020915,   70.66188427,   87.58756655,  108.58165067, 134.62162182,  166.91216751,  206.96795495,  256.6480407 , 318.26225167,  394.68629118,  489.4981103 ,  607.05465989, 752.91596793,  933.89865822, 1158.34571164, 1436.81649577,1782.25297728, 2210.9018279 , 2742.6759728 , 3402.48964037, 4221.25240462, 5237.33672474, 6498.40547232, 8063.39462477,10000])
    cross_section=np.array([ 1.99723394,  2.31035747,  2.63352881,  3.0125057 ,  3.44498106,3.9310212 ,  4.49362722,  5.13488228,  5.82275201,  6.62386586,7.43838688,  8.21563625,  8.92480731,  9.49494378, 10.04758804,10.50233217, 10.87242077, 11.21946831, 11.47274352, 11.68161778,11.8625112 , 11.99474382, 12.04436626, 12.15258435, 12.15072856,12.05819258, 12.00484587, 11.88794629, 11.75959202, 11.55197685,11.33588782, 11.08224839, 10.78222788, 10.43434051, 10.03841081,9.62654505,  9.3615076 ])
    cross=energy+0.000001
            
    for i in np.arange(len(energy_cr)-1):
        c=(np.logical_and(energy >= energy_cr[i], energy < energy_cr[i+1]))
        cross[c]= cross_section[i]+(energy[c]-energy_cr[i])*(cross_section[i+1]-cross_section[i])/(energy_cr[i+1]-energy_cr[i])
    
    return cross * energy;


# In[63]:


@numba.njit(parallel=True, fastmath = True)
def cross_section_anu_tau(energy):
    #energy unit is GeV
    energy_cr=np.array([10,14.25007384, 15.53921235, 17.27623012, 19.12021474, 22.28445382, 25.83686893,29.59252301,35.73007508,   45.56523841,   59.84669651,   78.05749246,97.45060547,  122.37570308,  153.8157457 ,  197.39322108,250.70135017,  331.24025713,  416.80178198,  550.77429733,693.09702612,  853.2316371 , 1092.31188445, 1374.78524344,1692.45820141, 2146.68537056, 2727.7287359 , 3396.23410453,4260.2635137 , 5413.72732937, 6741.53374305, 10000])
    cross_section=np.array([0.87373715, 1.02338813, 1.17722342, 1.38194717, 1.57059615,1.86641678, 2.1527882 , 2.43582697, 2.78287421, 3.21878944,3.67933589, 4.06582293, 4.37344408, 4.64242313, 4.88462023,5.11924763, 5.31019852, 5.50001755, 5.6301425 , 5.7589069 ,5.85193771, 5.9247261 , 5.99384122, 6.00168948, 6.06294184,6.04156297, 5.98995213, 5.97895661, 5.89809973, 5.81339212,5.72035429, 5.60518047])
    cross=energy+0.000001
            
    for i in np.arange(len(energy_cr)-1):
        c=(np.logical_and(energy >= energy_cr[i], energy < energy_cr[i+1]))
        cross[c]= cross_section[i]+(energy[c]-energy_cr[i])*(cross_section[i+1]-cross_section[i])/(energy_cr[i+1]-energy_cr[i])
    
    return cross * energy;


# # Standard Model

# #### $\nu_{\mu}$

# In[64]:


@numba.njit(parallel=True, fastmath = True)
def flux_pion_nu_mu(energy): #flux_nu_pion_p
    #energy unit is GeV
    

    energy_f = np.array([  10.0000,   12.60971362,   12.60492808,   15.85262191,
                                 15.85673433,   19.97079055,   19.97079055,   25.07318391,
                                 25.07318391,   31.47920207,   31.47920207,   39.7019118 ,
                                 39.70324752,   50.07313043,   50.07313043,   62.29689529,
                                 62.29689529,   78.55330401,   78.55838228,   99.0940163 ,
                                 99.0940163 ,  125.54928081,  125.54928081,  157.62621911,
                                157.62621911,  197.89858445,  197.89858445,  250.73183908,
                                250.73183908,  312.793005633,  312.79302071,  395.21911804,
                                395.21911804,  498.463022285 ,  498.463032285,  628.66455128,
                                628.66455128,  785.70833144,  785.70843144,  990.94016305,
                                990.94016305, 1249.805527985, 1249.80557285, 1569.1218845,
                               1569.12185185, 1978.98584449, 1978.98584449, 2484.60249499,
                               2507.31839079,2510,10000])
    
    fl = np.array([1.9425299e+04, 1.94247259e+04, 2.67292677e+04, 2.673041842e+04,
                       3.37793001e+04, 3.37793001e+04, 3.67806351e+04, 3.678017451e+04,
                       4.5030665e+04, 4.50449547e+04, 4.90028321e+04, 4.90460735e+04,
                       5.70048204e+04, 5.70939998e+04, 6.39609598e+04, 6.39609598e+04,
                       6.96439747e+04, 6.96439747e+04, 7.32352169e+04, 7.32721213e+04,
                       7.70319329e+04, 7.70629924e+04, 7.26721213e+04, 7.26721213e+04,
                       6.81775522e+04, 6.81775522e+04, 6.26141988e+04, 6.26141988e+04,
                       5.45483068e+04, 5.45108642e+04, 4.45449547e+04, 4.45449547e+04,
                       3.45058549e+04, 3.45058549e+04, 2.40312488e+04, 2.40312488e+04,
                       1.57012221e+04, 1.57012221e+04, 9.02895956e+03, 9.02895956e+03,
                       4.70840772e+03, 4.70800420e+03, 1.84947232e+03, 1.84010874e+03,
                       4.68791434e+02, 4.68791434e+02, 5.12647238e+01, 5.12621330e+01,
                       1.04348038e+00,0,0]) # ino dorost kon
    
    
    flux=energy+0.000001
            
    for i in np.arange(len(energy_f)-1):
        c=(np.logical_and(energy >= energy_f[i], energy < energy_f[i+1]))
        flux[c]= fl[i] #+(energy[c]-energy_f[i])*(fl[i+1]-fl[i])/(energy_f[i+1]-energy_f[i])
    
    return flux


# ## fluxes
# ### We did all the calculation below to compute:
# 
# * flux_nu_mu(energy)
# * flux_anu_mu(energy)
# 
# * flux_nu_e(energy)
# * flux_anu_e(energy)
# 
# * flux_nu_tau(energy)
# * flux_anu_tau(energy)

# In[65]:


@numba.njit(parallel=True)
def flux_kaon_nu_mu(energy): #flux_nu_kaon_p
    #energy unit is GeV
    
    energy_f = np.array([  10.00000,   12.60492808,   12.60971362,   15.90673433,
                                 15.90673433,   19.94985844,   19.94079055,   25.10318391,
                                 25.1024197 ,   39.5219118 ,   39.5219118 ,   50.53093244,
                                 50.53093244,   62.86645513,   62.86645513,   79.64999828,
                                 79.64999828,  100.        ,   99.9940163 ,  126.69928081,
                                126.6971362 ,  159.0673433 ,  159.0673433 ,  199.70790551,
                                199.70790551,  250.73183908,  250.73183908,  314.79202071,
                                314.79202071,  395.21911804,  395.21911804,  496.1947603 ,
                                496.1947603 ,  628.66455128,  628.66455128,  789.28382281,
                                789.28382281,  990.94016305,  990.94016305, 1250.49280805,
                               1250.49824792, 1570.28151262, 1570.28219107, 1978.98584449,
                               1978.98584449, 2507.31839079, 2507.31839079, 3147.92020713,
                               3147.92020713, 3916.38497268, 3916.38497268, 4961.947603  ,
                               4961.947603  , 6229.68952949, 6229.68952949, 6300, 10000]);
    
    fl = np.array([   2.69577672e+02, 2.69577672e+02, 6.58952294e+02, 6.58125616e+02,
                           8.32755597e+02, 8.32755597e+02, 7.81251974e+02, 7.81251974e+02,
                           1.67537985e+03, 1.67077012e+03, 1.90968256e+03, 1.90968256e+03,
                           2.77206430e+03, 2.77104301e+03, 2.51830923e+03, 2.51830923e+03,
                           3.04991935e+03, 3.04991935e+03, 3.93725991e+03, 3.93725991e+03,
                           4.51971478e+03, 4.51349494e+03, 5.41784090e+03, 5.41784090e+03,
                           5.78500920e+03, 5.78922315e+03, 6.47153644e+03, 6.47337683e+03,
                           7.29820850e+03, 7.29820850e+03, 7.77933903e+03, 7.77553739e+03,
                           8.11758766e+03, 8.11758766e+03, 7.77933903e+03, 7.77933903e+03,
                           7.14453753e+03, 7.14453753e+03, 6.02610880e+03, 6.029922315e+03,
                           4.28709060e+03, 4.28709060e+03, 2.80104301e+03, 2.80206430e+03,
                           1.61073475e+03, 1.61073475e+03, 8.15221108e+02, 8.15221108e+02,
                           3.44008338e+02, 3.44680679e+02, 9.50208375e+01, 9.50208375e+01,
                           6.50591953e+00, 6.50591953e+00, 1.04348038e+00, 0.0,0.0]);
    
    flux=energy+0.000001
            
    for i in np.arange(len(energy_f)-1):
        c=(np.logical_and(energy >= energy_f[i], energy < energy_f[i+1]))
        flux[c]= fl[i]#+(energy[c]-energy_f[i])*(fl[i+1]-fl[i])/(energy_f[i+1]-energy_f[i])
    
    return flux


# In[66]:


@numba.njit(parallel=True, fastmath=True)
def flux_charm_nu_mu(energy): #flux_nu_charm_p
    #energy unit is GeV
    

    energy_f = np.array([  10.0 , 12.66971362,   12.66971362,   15.97944933,   15.97944933,
                             20.06208371,   20.06208371,   25.07318391,   25.07318391,
                             31.47920207,   31.47920207,   39.5219118 ,   39.5219118 ,
                             49.61947603,   49.61947603,   62.29689529,   62.29689529,
                             79.28919028,   79.28919028,   99.0940163 ,   99.0940163 ,
                            125.54928081,  125.54928081,  157.62621911,  157.62621911,
                            197.89858445,  197.89858445,  249.59604429,  249.59604429,
                            313.36603852,  313.36603852,  395.21911804,  395.21911804,
                            493.94703849,  493.94703849,  622.96895295,  622.96895295,
                            782.13304007,  782.13304007,  995.47008152,  995.47008152,
                           1238.48249368, 1238.48249368, 1562.04620293, 1562.04620293,
                           1988.0324498 , 1988.0324498 , 2484.60249499, 2484.60249499,
                           3105.26993308, 3105.26993308, 3970.58682712, 3970.58682712,
                           4939.47038488, 4939.47038488, 5000.00, 10000])

    fl = np.array([  4.7788366 ,   4.7788366 ,   6.71732697,   6.71732697,
                    10.95887074,  10.95887074,  16.59445644,  16.59445644,
                    24.86358629,  24.86358629,  35.70098691,  35.70098691,
                    47.58540312,  47.58540312,  64.78288113,  64.78288113,
                    80.14597204,  80.14597204, 109.12327103, 109.12327103,
                   137.90530136, 137.90530136, 170.60918307, 170.60918307,
                   204.42595927, 204.42595927, 239.81520228, 239.81520228,
                   272.4768283 , 272.4768283 , 306.29279699, 306.29279699,
                   326.48498751, 326.48498751, 337.09399583, 337.09399583,
                   326.55891849, 326.55891849, 306.29279699, 306.29279699,
                   281.29901214, 281.29901214, 234.76565712, 234.76565712,
                   183.83307691, 183.83307691, 122.66610746, 122.66610746,
                    60.13638792,  60.13638792,  17.6884372 ,  17.6884372 ,
                     1.3760435 ,   1.3760435, 1.06592447, 0.0, 0.0 ])
    
    
    flux=energy+0.000001
            
    for i in np.arange(len(energy_f)-1):
        c=(np.logical_and(energy >= energy_f[i], energy < energy_f[i+1]))
        flux[c]= fl[i] #+(energy[c]-energy_f[i])*(fl[i+1]-fl[i])/(energy_f[i+1]-energy_f[i])
    
    return flux


# In[67]:


@numba.njit(parallel=True, fastmath=True)
def flux_nu_mu(energy): 
    return flux_pion_nu_mu(energy) + flux_kaon_nu_mu(energy) + flux_charm_nu_mu(energy)


# #### $\bar{\nu}_{\mu}$

# In[68]:


@numba.njit(parallel=True, fastmath = True)
def flux_pion_anu_mu(energy): #flux_nu_pion_n
    #energy unit is GeV
    
    energy_f = np.array([   10.000000,   12.23646536,   12.234516025,   15.35055332,
                                     15.35052878,   19.34534515,   19.34586786,   24.38149361,
                                     24.38117172,   30.5823168 ,   30.58027566,   38.71899826,
                                     38.71512203,   48.57917505,   48.57269069,   61.50201884,
                                     61.5017574 ,   77.1589676 ,   77.15381784,   97.69101713,
                                     97.69101713,  121.4655014 ,  121.46766274,  153.82321059,
                                    153.82374433,  194.02191525,  194.02750758,  246.75746127,
                                    246.75356264,  306.81475472,  306.92740548,  392.17064153,
                                    392.1744829 ,  490.63760187,  490.63227716,  615.13785468,
                                    615.13252042,  780.29061701,  780.29424214,  985.89095618,
                                    985.94465853, 1236.91757145, 1236.9893474, 1570.97153656,
                                   1570.97020875, 1971.16490808, 1971.16220482, 2482.31989164,
                                   2516.26603019, 2518.0, 10000]);
    
    fl = np.array([  2.52572842e+04, 2.52511275e+04, 2.90824388e+04, 2.90501009e+04,
                           2.98688081e+04, 2.98672044e+04, 3.39120448e+04, 3.39175330e+04,
                           4.10978367e+04, 4.10456402e+04, 4.40548659e+04, 4.40563756e+04,
                           4.69770273e+04, 4.69504956e+04, 5.05539664e+04, 5.05174258e+04,
                           5.55561489e+04, 5.55419603e+04, 5.73174145e+04, 5.73159853e+04,
                           5.77759853e+04, 5.77620341e+04, 5.48656160e+04, 5.48259589e+04,
                           5.03757300e+04, 5.03707182e+04, 4.38079007e+04, 4.38043104e+04,
                           3.66205610e+04, 3.66261269e+04, 2.89955730e+04, 2.89838091e+04,
                           2.06518108e+04, 2.06374575e+04, 1.40994489e+04, 1.40945956e+04,
                           8.47857704e+03, 8.47221307e+03, 4.58631143e+03, 4.58312388e+03,
                           2.10921034e+03, 2.10301529e+03, 7.50868399e+02, 7.50461413e+02,
                           1.79587769e+02, 1.79462953e+02, 1.80525252e+01, 1.80578755e+01,
                           1.02565876e+00,0,0]); # ino dorost kon
    
    flux=energy+0.000001
            
    for i in np.arange(len(energy_f)-1):
        c=(np.logical_and(energy >= energy_f[i], energy < energy_f[i+1]))
        flux[c]= fl[i]#+(energy[c]-energy_f[i])*(fl[i+1]-fl[i])/(energy_f[i+1]-energy_f[i])
    
    return flux


# In[69]:


@numba.njit(parallel=True, fastmath = True)
def flux_kaon_anu_mu(energy): #flux_nu_kaon_n  
    #energy unit is GeV
    
    energy_f = np.array([  10.000000,   12.36769528,   12.36368624,   15.50854153,
                                 15.50913298,   19.54079077,   19.54005098,   24.61693686,
                                 24.6173891 ,   30.7407137 ,   30.7400236 ,   38.92889181,
                                 38.92421588,   49.25993978,   49.25829589,   61.5000836 ,
                                 61.5017879 ,   78.2289369,   78.21673958,   97.24512983,
                                 97.24539345,  123.10067147,  123.10601905,  154.4464968 ,
                                154.44072448,  195.52054931,  195.52444721,  245.30306034,
                                245.30031326,  307.76901264,  307.76792893,  386.15187613,
                                386.15053633,  490.94707449,  490.47144369,  616.56466638,
                                616.56425833,  765.96915015,  765.2662485 ,  975.21635351,
                                975.21697368, 1241.30564759, 1241.30564759, 1555.10490695,
                               1555.10588075, 1966.36896805, 1966.36896805, 2492.59968037,
                               2492.52737841, 3160.09686717, 3160.097013  , 3975.52832147,
                               3975.52081275 , 4996.52492288, 5061.81168837, 5200.0, 10000]);
    
    fl = np.array([2.11315719e+02, 2.11386348e+02, 5.25140215e+02, 5.25175235e+02,
                           1.12426674e+03, 1.12992764e+03, 1.00482261e+03, 1.00994399e+03,
                           1.8658293e+03, 1.86440710e+03, 1.44625908e+03, 1.44521371e+03,
                           2.16055472e+03, 2.16099307e+03, 2.20517200e+03, 2.20755254e+03,
                           2.80076412e+03, 2.80934211e+03, 3.08948459e+03, 3.08742322e+03,
                           3.28980252e+03, 3.28742464e+03, 3.73252848e+03, 3.73293433e+03,
                           4.14626723e+03, 4.14627029e+03, 4.50928983e+03, 4.50615581e+03,
                           4.90423291e+03, 4.90082440e+03, 5.44376682e+03, 5.44406499e+03,
                           5.2116159e+03, 5.21467007e+03, 4.84126150e+03, 4.84047708e+03,
                           4.49339157e+03, 4.49039348e+03, 3.63399452e+03, 3.70893641e+03,
                           2.87709854e+03, 2.87501896e+03, 1.98420431e+03, 1.98482254e+03,
                           1.20642051e+03, 1.20554851e+03, 5.86660932e+02, 5.86636602e+02,
                           2.51605611e+02, 2.5165482e+02, 7.68574287e+01, 7.36230053e+01,
                           1.21831549e+01, 1.21746875e+01, 1.02346478e+00,0.0,0.0]);
    
    
    flux=energy+0.000001
            
    for i in np.arange(len(energy_f)-1):
        c=(np.logical_and(energy >= energy_f[i], energy < energy_f[i+1]))
        flux[c]= fl[i]#+(energy[c]-energy_f[i])*(fl[i+1]-fl[i])/(energy_f[i+1]-energy_f[i])
    
    return flux


# In[70]:


@numba.njit(parallel=True, fastmath=True)
def flux_charm_anu_mu(energy): #flux_anu_charm_n
    energy_f = np.array([  10.000000000, 12.39242735,   12.39242735,   15.68473837,   15.68473837,
                             19.7644984 ,   19.7644984 ,   24.66630023,   24.66630023,
                             31.21803531,   31.21803531,   39.14645643,   39.14645643,
                             49.31962758,   49.31962758,   62.13847507,   62.13847507,
                             78.64993554,   78.64993554,   98.20038595,   98.20038595,
                            123.73000773,  123.73000773,  155.20540982,  155.20540982,
                            196.46960121,  196.46960121,  245.34777652,  245.34777652,
                            309.19428701,  309.19428701,  391.47107923,  391.47107923,
                            495.63350729,  495.63350729,  621.93451122,  621.93451122,
                            776.93364845,  776.93364845,  979.57084214,  979.57084214,
                           1240.81486121, 1240.81486121, 1572.07166355, 1572.07166355,
                           1983.22309659, 1983.22309659, 2479.9192288 , 2479.9192288 ,
                           3145.12391799, 3145.12391799, 3972.74865875, 3972.74865875,
                           5014.64978095, 5014.64978095, 5020.0, 10000])

    fl = np.array([  4.78602804,   4.78602804,  14.07465115,  14.07465115,
                     8.55355526,   8.55355526,  18.70337116,  18.70337116,
                    24.34924116,  24.34924116,  34.14530813,  34.14530813,
                    50.99977143,  50.99977143,  63.64799722,  63.64799722,
                    83.74635051,  83.74635051, 105.6228969 , 105.6228969 ,
                   136.06823669, 136.06823669, 166.24275043, 166.24275043,
                   196.7725439 , 196.7725439 , 230.47269911, 230.47269911,
                   258.72621767, 258.72621767, 281.4478371 , 281.4478371 ,
                   296.47223182, 296.47223182, 299.39806804, 299.39806804,
                   277.84756349, 277.84756349, 249.77308451, 249.77308451,
                   197.75659071, 197.75659071, 145.385665  , 145.385665  ,
                    91.20123193,  91.20123193,  49.86292121,  49.86292121,
                    21.37096631,  21.37096631,   6.52841479,   6.52841479,
                     1.46719127,   1.46719127,   1.02349324, 0.0 , 0.0])


    
    flux=energy+0.000001
            
    for i in np.arange(len(energy_f)-1):
        c=(np.logical_and(energy >= energy_f[i], energy < energy_f[i+1]))
        flux[c]= fl[i] #+(energy[c]-energy_f[i])*(fl[i+1]-fl[i])/(energy_f[i+1]-energy_f[i])
    
    return flux 


# In[71]:


@numba.njit(parallel=True, fastmath=True)
def flux_anu_mu(energy):
    return flux_pion_anu_mu(energy) + flux_kaon_anu_mu(energy) + flux_charm_anu_mu(energy)


# #### $\nu_{e}$

# In[72]:


@numba.njit(parallel=True)
def flux_kaon_nu_e(energy):
    energy_f = np.array([   10.000000,   12.56058599,   12.56058599,   15.77683204,
                                     19.81662554,   19.81662554,   25.17619531,   25.17619531,
                                     31.44435727,   31.4427766 ,   39.72006047,   39.72006047,
                                     49.8907235 ,   49.8907235 ,   63.00567225,   63.00408102,
                                     79.61411999,   79.61411999,  100.        ,  100.        ,
                                    125.60585988,  125.60585988,  157.76832037,  157.76832037,
                                    198.16625542,  198.16625542,  251.76195307,  251.76195307,
                                    316.22776602,   316.22776602,  397.20060469,  397.20060469,
                                    498.90723499, 498.90723499,  626.75672253,  633.75081015,
                                    796.14119989, 796.14119989, 1000.        , 1000.        ,
                                    1256.05859883, 1256.05859883, 1577.7232037 , 1595.72000302,
                                    2004.38063405, 2004.38063405, 2517.61953074, 2517.61953074,
                                    3162.27766017, 3162.27766017, 4017.54172617, 4017.54172617, 
                                    4100.0, 10000])

    fl = np.array([2.24690657e+02, 2.24690657e+02, 3.82060874e+02, 3.82060874e+02,
                           3.82060874e+02, 4.60070310e+02, 4.60445357e+02, 5.39496303e+02,
                           5.39496303e+02, 6.49651006e+02, 6.49651006e+02, 7.41851541e+02,
                           7.41851541e+02, 8.93323267e+02, 8.93323267e+02, 1.02010654e+03,
                           1.02010654e+03, 1.19621653e+03, 1.19621653e+03, 1.36598738e+03,
                           1.36020724e+03, 1.55985264e+03, 1.55985264e+03, 1.70457500e+03,
                           1.70914023e+03, 1.82914375e+03, 1.82914375e+03, 1.92886838e+03,
                           1.92886838e+03, 1.87834436e+03, 1.87834436e+03, 1.78123189e+03, 1.78123189e+03,
                           1.55985264e+03, 1.55985264e+03, 1.26143406e+03, 1.26143406e+03,
                           9.17352023e+02, 9.17352023e+02, 5.99926413e+02, 5.99926413e+02,
                           3.44076186e+02, 3.34076688e+02, 1.72310300e+02, 1.72310300e+02,
                           7.40767610e+01, 7.40945139e+01, 2.54882523e+01, 2.54882523e+01,
                           5.69409218e+00, 5.69510095e+00, 1.08288449e+00, 0.0, 0.0])
    flux=energy+0.000001
    
    for i in np.arange(len(energy_f)-1):
        c=(np.logical_and(energy >= energy_f[i], energy < energy_f[i+1]))
        flux[c]= fl[i]#+(energy[c]-energy_f[i])*(fl[i+1]-fl[i])/(energy_f[i+1]-energy_f[i])
    
    return flux


# In[73]:


@numba.njit(parallel=True, fastmath = True)
def flux_charm_nu_e(energy):
    energy_f = np.array([  10.000000000,   12.67058599,   12.67458245,   15.77683204,
                                     15.77683204,   19.81662554,   19.81438063,   25.17619531,
                                     25.17619531,   31.44435727,   31.4427766 ,   39.72006047,
                                     39.72006047,   49.8907235 ,   49.8907235 ,   63.38408102,
                                     63.38408102,   79.61411999,   79.61411999,   100.0000000,
                                    100.        ,  125.60585988,  125.60585988,  157.76832037,
                                    157.76832037,  198.16625542,  198.16625542,  249.90842912,
                                    249.90842912,  316.22776602,  316.22776602,  397.20060469,
                                    397.20060469,  498.90723499,  498.90723499,  633.84081015,
                                    633.84081015,  796.14119989,  796.14119989, 1000.        ,
                                   1000.        , 1256.05859883, 1256.05859883, 1586.72660336 ,
                                   1586.72660336, 1993.021594145, 1993.021594145, 2517.61953074,
                                   2517.61953074, 3162.27766017, 3162.27766017, 3994.77388656,
                                   3994.77388656, 5017.670090605, 5017.670090605, 5100.0, 10000])

    fl = np.array([  6.24293839,   6.24293839,   7.51762558,   7.51762558,
                            12.90286617,  12.9067018 ,  17.11706874,  17.11706874,
                            23.5373695 ,  23.53048153,  36.00117004,  36.00926645,
                            48.19445996,  48.19445996,  64.53543933,  64.53543933,
                            81.94919062,  81.94919062, 109.73516508, 109.73516508,
                           135.69531124, 135.69531124, 172.31030025, 172.31030025,
                           207.4927286 , 207.4927286 , 243.31402719, 243.31402719,
                           277.84592689, 277.84592689, 308.96803063, 308.96803063,
                           325.8129182 , 325.8129182 , 343.57618634, 343.57618634,
                           334.57668761, 334.57668761, 317.27870349, 317.27870349,
                           285.31947229, 285.31947229, 243.31402719, 243.31402719,
                           191.61113759, 191.61113759, 125.30912832, 125.30912832,
                           63.690231445,  63.690231445,  19.809258355,  19.809258355,
                             1.866085835,   1.866085835,   1.08288449, 0.0, 0.0 ])
    
    flux=energy+0.000001
    
    for i in np.arange(len(energy_f)-1):
        c=(np.logical_and(energy >= energy_f[i], energy < energy_f[i+1]))
        flux[c]= fl[i]#+(energy[c]-energy_f[i])*(fl[i+1]-fl[i])/(energy_f[i+1]-energy_f[i])
    
    return flux


# In[74]:


@numba.njit(parallel=True, fastmath = True)
def flux_hyperon_nu_e(energy):
    energy_f = np.array([ 10.        ,  12.56058599,  12.56058599,  15.77683204,
                                    15.77683204,  19.93021594,  19.93021594,  25.17619531,
                                    25.17619531,  31.6227766 ,  31.6227766 ,  39.72006047,
                                    39.72006047,  49.8907235 ,  49.8907235 ,  63.024876635,
                                    63.024876635,  79.162938235,  79.162938235, 100.        ,
                                   100.        , 125.60585988, 125.60585988, 157.76832037,
                                   157.76832037, 198.16625542, 198.16625542, 251.76195307,
                                   251.76195307, 312.64357272, 312.64357272, 394.9496262899,
                                   394.9496262899, 498.90723499, 498.90723499, 626.65672253,
                                   626.65672253, 796.14119989, 796.14119989, 800.0, 10000.0])

    fl = np.array([ 6.671841765,  6.671841765,  6.41086197,  6.41086197,  8.25020534,
                                8.25020534, 12.78286617, 12.78286617, 19.290382475, 19.290382475,
                               21.45113859, 21.45113859, 27.60083305, 27.60083305, 35.519800805,
                               35.519800805, 42.772256665, 42.772256665, 47.56326665, 47.56326665,
                               50.8220142 , 50.8220142 , 53.59282228, 53.59282228, 51.505523645 ,
                               51.505523645, 45.10419325, 45.10419325, 35.519800805, 35.519800805,
                               24.178996305, 24.178996305 , 14.028534625, 14.028534625,  6.671841765,
                                6.671841765, 2.49880732 , 2.49880732,  1.08288449, 0.0, 0.0])
    
    
    
    flux=energy+0.000001
    
    for i in np.arange(len(energy_f)-1):
        c=(np.logical_and(energy >= energy_f[i], energy < energy_f[i+1]))
        flux[c]= fl[i]#+(energy[c]-energy_f[i])*(fl[i+1]-fl[i])/(energy_f[i+1]-energy_f[i])
    
    return flux


# In[75]:


def flux_nu_e(energy):
    return flux_kaon_nu_e(energy) + flux_charm_nu_e(energy) + flux_hyperon_nu_e(energy)


# #### $\bar{\nu}_{e}$

# In[76]:


@numba.njit(parallel=True, fastmath = True)
def flux_kaon_anu_e(energy):
    energy_f = np.array([  10.000000000, 12.64304989,   12.64304989,   15.89992435,   15.89992435,
                                     19.99520799,   19.99520799,   25.28004122,   25.28004122,
                                     31.6227766 ,   31.6227766 ,   39.98083424,   39.98083424,
                                     50.01198291,   50.01198291,   63.23039952,   63.23039952,
                                     79.9425096 ,   79.9425096 ,  100.        ,  100.        ,
                                    126.43049895,  126.43049895,  159.84671064,  159.84671064,
                                    199.95207986,  199.95207986,  251.46012782,  251.46012782,
                                    319.61682251,  319.61682251,  399.80834239,  399.80834239,
                                    505.47968212,  505.47968212,  639.08048419,  639.08048419,
                                    799.42509604,  799.42509604, 1010.71713765, 1010.71713765,
                                   1277.85472009, 1277.85472009, 1598.46710643, 1598.46710643,
                                   2020.94993819, 2020.94993819, 2541.55060628, 2541.55060628,
                                   3196.16822513, 3196.16822513, 4040.93143427, 4040.93143427,
                                   4100.0, 10000])


    fl = np.array([ 298.88827664,  298.88827664,  313.87987347,  313.87987347,
                            373.3264789 ,  373.3264789 ,  466.6798588 ,  466.6798588 ,
                            528.09787066,  528.09787066,  660.16580489,  660.16580489,
                            747.04778719,  747.04778719,  888.51624137,  888.51624137,
                           1005.43127694, 1005.43127694, 1123.76060229, 1123.76060229,
                           1287.4877785 , 1287.4877785 , 1421.08260926, 1421.08260926,
                           1568.56988418, 1568.56988418, 1647.30927533, 1647.30927533,
                           1708.62730387, 1708.62730387, 1644.52725827, 1644.52725827,
                           1524.93016489, 1524.93016489, 1345.33012642, 1345.33012642,
                           1074.41700861, 1074.41700861,  767.1921711 ,  767.1921711 ,
                            489.71401604,  489.71401604,  272.57992173,  272.57992173,
                            135.69741681,  135.69741681,   56.71466842,   56.71466842,
                             18.03146721,   18.03146721,    3.7548388 ,    3.7548388,
                           1.02859777e+00, 0.0, 0.0 ])
    flux=energy+0.000001
    
    for i in np.arange(len(energy_f)-1):
        c=(np.logical_and(energy >= energy_f[i], energy < energy_f[i+1]))
        flux[c]= fl[i]#+(energy[c]-energy_f[i])*(fl[i+1]-fl[i])/(energy_f[i+1]-energy_f[i])
    
    return flux


# In[77]:


@numba.njit(parallel=True, fastmath = True)
def flux_charm_anu_e(energy):
    energy_f = np.array([  10.00000000, 12.64304989,   12.64304989,   15.81517763,   15.81517763,
                                     20.10235369,   20.10235369,   25.28004122,   25.28004122,
                                     31.79222943,   31.79222943,   39.76886588,   39.76886588,
                                     50.01198291,   50.01198291,   63.23039952,   63.23039952,
                                     79.9425096 ,   79.9425096 ,  100.        ,  100.        ,
                                    126.43049895,  126.43049895,  159.84671064,  159.84671064,
                                    199.95207986,  199.95207986,  252.80041222,  252.80041222,
                                    316.22776602,  316.22776602,  399.80834239,  399.80834239,
                                    505.47968212,  505.47968212,  632.30399523,  632.30399523,
                                    799.42509604,  799.42509604, 1005.35856883, 1005.35856883,
                                   1264.30498948, 1264.30498948, 1598.46710643, 1598.46710643,
                                   2010.23536838, 2010.23536838, 2541.55060628, 2541.55060628,
                                   3196.16822513, 3196.16822513, 4019.50742907, 4019.50742907,
                                   5054.79682119, 5054.79682119, 5100.0, 10000])

    fl = np.array([  5.16818884,   5.16818884,   8.81966143,   8.81966143,
                            10.10445487,  10.10445487,  18.81154488,  18.81154488,
                            25.97803564,  25.97803564,  33.29321391,  33.29321391,
                            48.93234823,  48.93234823,  61.93107435,  61.93107435,
                            83.420216  ,  83.420216  , 109.60529454, 109.60529454,
                           137.01563955, 137.01563955, 167.06658488, 167.06658488,
                           203.71236278, 203.71236278, 236.3325616 , 236.3325616 ,
                           267.4354168 , 267.4354168 , 295.19124692, 295.19124692,
                           310.12840213, 310.12840213, 309.74147917, 309.74147917,
                           290.83388617, 290.83388617, 259.78035639, 259.78035639,
                           210.07927063, 210.07927063, 153.76360728, 153.76360728,
                            99.38972582,  99.38972582,  53.29717482,  53.29717482,
                            22.84386513,  22.84386513,   6.82431546,   6.82431546,
                             1.62969472,   1.62969472,   1.02776832, 0.0, 0.0])

    flux=energy+0.000001
    
    for i in np.arange(len(energy_f)-1):
        c=(np.logical_and(energy >= energy_f[i], energy < energy_f[i+1]))
        flux[c]= fl[i]#+(energy[c]-energy_f[i])*(fl[i+1]-fl[i])/(energy_f[i+1]-energy_f[i])
    
    return flux


# In[78]:


@numba.njit(parallel=True, fastmath = True)
def flux_hyperon_anu_e(energy):
    energy_f = np.array([ 10.00000, 12.64304989,   12.64304989,   15.81517763,   15.81517763,
                                     19.99520799,   19.99520799,   25.28004122,   25.28004122,
                                     31.45512057,   31.45512057,   39.98083424,   39.98083424,
                                     50.27997556,   50.27997556,   63.23039952,   63.23039952,
                                     79.9425096 ,   79.9425096 ,  100.        ,  100.        ,
                                    126.43049895,  126.43049895,  159.84671064,  159.84671064,
                                    199.95207986,  199.95207986,  252.80041222,  252.80041222,
                                    316.22776602,  316.22776602,  399.80834239,  399.80834239,
                                    505.47968212,  505.47968212,  639.08048419,  639.08048419,
                                    803.70887044,  803.70887044, 1010.71713765, 1010.71713765,
                                   1271.07985478, 1271.07985478, 1598.46710643, 1598.46710643,
                                   2020.94993819, 2100.0, 10000.0])

    fl = np.array([ 11.75177521,  11.75177521,  12.97143499,  12.97143499,
                                15.62218476,  15.62218476,  20.02107591,  20.02107591,
                                37.73782001,  37.73782001,  53.42704239,  53.42704239,
                                83.55973083,  83.55973083, 118.29907531, 118.29907531,
                               182.74403277, 182.74403277, 252.3626932 , 252.3626932 ,
                               344.16772589, 344.16772589, 475.27355384, 475.27355384,
                               656.33489402, 656.33489402, 820.47263899, 820.47263899,
                               940.15765185, 940.15765185, 987.32277212, 987.32277212,
                               938.57827737, 938.57827737, 722.03557726, 722.03557726,
                               496.63547664, 496.63547664, 266.3179479 , 266.3179479 ,
                               103.33305625, 103.33305625,  22.33794381,  22.33794381,
                                 1.08426434,   1.08426434, 0.0, 0.0])
    
    flux=energy+0.000001
    
    for i in np.arange(len(energy_f)-1):
        c=(np.logical_and(energy >= energy_f[i], energy < energy_f[i+1]))
        flux[c]= fl[i]#+(energy[c]-energy_f[i])*(fl[i+1]-fl[i])/(energy_f[i+1]-energy_f[i])
    
    return flux


# In[79]:


def flux_anu_e(energy):
    return flux_kaon_anu_e(energy) + flux_charm_anu_e(energy) + flux_hyperon_anu_e(energy)


# #### ${\nu}_{\tau}$

# In[80]:


@numba.njit(parallel=True, fastmath = True)
def flux_charm_nu_tau(energy):
    
    energy_f = np.array([ 10.0000 , 12.71680652,   12.71680652,   15.8456858 ,   15.8456858 ,
                                     20.1321759 ,   20.1321759 ,   25.33242884,   25.33242884,
                                     31.86863131,   31.86863131,   40.08944563,   40.08944563,
                                     50.43321305,   50.43321305,   64.05555472,   64.05555472,
                                     80.55896418,   80.55896418,  101.32596877,  101.32596877,
                                    127.44349813,  127.44349813,  160.27096085,  160.27096085,
                                    201.52653412,  201.52653412,  254.59297273,  254.59297273,
                                    318.57180903,  318.57180903,  400.50233728,  400.50233728,
                                    508.27249455,  508.27249455,  638.77062842,  638.77062842,
                                    802.64496919,  802.64496919, 1004.00150313, 1004.00150313,
                                   1279.92247437, 1279.92247437, 1600.56990316, 1600.56990316,
                                   2010.59019264, 2010.59019264, 2536.82892897, 2536.82892897,
                                   3184.86647789, 3184.86647789, 3200.0, 10000])

    fl = np.array([ 2.21898234,  2.21898234,  2.70827217,  2.70827217,  3.69239107,
                                3.69239107,  6.42232542,  6.42232542,  7.92620083,  7.92620083,
                               10.6867624 , 10.6867624 , 13.04321387, 13.04321387, 18.38440959,
                               18.38440959, 21.94687874, 21.94687874, 24.51600421, 24.51600421,
                               30.25305457, 30.25305457, 34.55107295, 34.55107295, 36.51965031,
                               36.51965031, 37.75053205, 37.75053205, 35.71998153, 35.71998153,
                               36.11538989, 36.11538989, 32.33072061, 32.33072061, 29.26663317,
                               29.26663317, 20.08682175, 20.08682175, 16.64002008, 16.64002008,
                               13.63375184, 13.63375184, 10.45275495, 10.45275495,  7.09558405,
                                7.09558405,  4.35963055,  4.35963055,  2.07689302,  2.07689302,
                                1.06867624, 0.0, 0.0])
    flux=energy+0.000001
    
    for i in np.arange(len(energy_f)-1):
        c=(np.logical_and(energy >= energy_f[i], energy < energy_f[i+1]))
        flux[c]= fl[i]#+(energy[c]-energy_f[i])*(fl[i+1]-fl[i])/(energy_f[i+1]-energy_f[i])
    
    return flux


# In[81]:


def flux_nu_tau(energy):
    return flux_charm_nu_tau(energy)


# #### $\bar{\nu}_{\tau}$

# In[82]:


@numba.njit(parallel=True, fastmath = True)
def flux_charm_anu_tau(energy):
    energy_f = np.array([  10.00000000, 12.56569749,   12.56569749,   15.91351006,   15.91351006,
                                         19.97889716,   19.97889716,   25.19079516,   25.19079516,
                                         31.76157226,   31.76157226,   39.86314039,   39.86314039,
                                         50.25382081,   50.25382081,   63.35281417,   63.35281417,
                                         79.50420073,   79.50420073,  100.66293434,  100.66293434,
                                        126.29727316,  126.29727316,  158.44297958,  158.44297958,
                                        200.58902105,  200.58902105,  253.91414042,  253.91414042,
                                        318.46824202,  318.46824202,  399.39260813,  399.39260813,
                                        505.45204929,  505.45204929,  636.77546618,  636.77546618,
                                        798.33317743,  798.33317743, 1005.52258874, 1005.52258874,
                                       1266.45384555, 1266.45384555, 1587.76808312, 1587.76808312,
                                       1999.00304674, 1999.00304674, 2526.83234138, 2526.83234138,
                                       3164.67918747, 3164.67918747, 3200.0, 10000])

    fl = np.array([ 2.51644829,  2.51644829,  2.26153385,  2.26153385,  4.22626088,
                                4.22626088,  5.5065989 ,  5.5065989 ,  7.72745924,  7.72745924,
                               10.72913153, 10.72913153, 13.54079194, 13.54079194, 17.088796  ,
                               17.088796  , 22.26581552, 22.26581552, 26.6469727 , 26.6469727 ,
                               29.60888943, 29.60888943, 33.25345149, 33.25345149, 34.6703399 ,
                               34.6703399 , 38.52354946, 38.52354946, 35.73857369, 35.73857369,
                               34.59681249, 34.59681249, 29.48340268, 29.48340268, 28.85009323,
                               28.85009323, 22.58291798, 22.58291798, 17.67891065, 17.67891065,
                               14.44182572, 14.44182572, 11.30570047, 11.30570047,  8.30568312,
                                8.30568312,  4.88262807,  4.88262807,  2.0439358 ,  2.0439358,
                               1.02506787, 0.0, 0.0 ])
     
    flux=energy+0.000001
    
    for i in np.arange(len(energy_f)-1):
        c=(np.logical_and(energy >= energy_f[i], energy < energy_f[i+1]))
        flux[c]= fl[i]#+(energy[c]-energy_f[i])*(fl[i+1]-fl[i])/(energy_f[i+1]-energy_f[i])
    
    return flux


# In[83]:


def flux_anu_tau(energy):
    return flux_charm_anu_tau(energy)


# ### Theoritical number of events and calculation of normalization factor
# 
# $N_i(\theta)=n_f \int dE_\nu \phi(E_\nu;\theta) P(E;\theta) \sigma(E_\nu)$
# 
# $P(E;\theta)=1$

# From NeutrinosParticleBeams_1
# 
# $NOE(\nu_e)=1296$
# 
# $NOE(\nu_\mu)=20439$
# 
# $NOE(\nu_\tau)=21$

# In[84]:


# @numba.njit(parallel=True, fastmath = True)
def number_of_events(energy,energy_bin,cross_section,probability,flux,normalization_factor):
    num_of_events=flux*probability*cross_section
    noe=np.zeros(len(energy_bin))
    
    dE = energy[2] - energy[1]

    for i in range(len(energy_bin)-1):
        c=(np.logical_and(energy >= energy_bin[i], energy < energy_bin[i+1]))
        noe[i]=np.sum(num_of_events[c])

    return noe*normalization_factor*dE


# In[85]:


nf_e = 1296/39449682121.7415


# In[86]:


nf_tau = 21/627742057.5684619


# In[87]:


nf_mu = 20439/539969029544.9096


# ## Gamma_SM

# In[88]:


@numba.njit()
def decay_rate_SM(mp, ml):

    """
    SM decay rate of pion->lepton+nu_l
    decay rate has to be multiplied by  G_F^2  f_pion^2  V_ud^2
    """ 
    
    drate= mp* ml*ml*(1-ml*ml/(mp*mp))*(1-ml*ml/(mp*mp))/(1*8*np.pi);#2*8*3.1415

    return drate


# ## Experimental Number of events per bin

# In[89]:


NOE_energy_bin=np.array([10.0,13.0,16.0,20.0,25.,32.0,40.0,50.0, 63.0,82.0,100,125,158.,200,250,320,400, 500,630,800,1000, 1300, 1600, 2000,2500, 3000, 4000, 5000,6300])

NOE_nu_e=np.array([1.89964335e-01, 4.19480947e-01, 5.51954620e-01, 8.81918228e-01,1.36419691e+00, 2.07642620e+00, 3.05999606e+00, 4.81073934e+00,6.97508169e+00, 1.04459158e+01, 1.49041630e+01, 2.16107453e+01,2.93711281e+01, 4.05692772e+01, 5.42548846e+01, 6.47839140e+01,7.86223397e+01, 9.08965628e+01, 9.23282582e+01, 8.93414028e+01,8.10325714e+01, 6.56275432e+01, 5.14609268e+01, 3.43237710e+01,1.82540804e+01, 6.37451146e+00, 7.77799407e-01, 1.19669274e-02,1.05086328e-02])
NOE_anu_e=np.array([8.46026594e-02, 1.20708224e-01, 1.86721286e-01, 3.28737058e-01,5.25249180e-01, 8.95317186e-01, 1.29819243e+00, 2.17749796e+00,3.42319991e+00, 5.12621216e+00, 7.31432246e+00, 1.14982608e+01,1.69451239e+01, 2.41753580e+01, 3.39371461e+01, 4.32337747e+01,5.07955577e+01, 5.24410746e+01, 5.32670645e+01, 4.67741462e+01,3.85012304e+01, 2.73954597e+01, 1.85714762e+01, 1.16112033e+01,5.78781266e+00, 2.05428210e+00, 5.19057359e-01, 3.65427570e-02,1.03399980e-02])
NOE_nu_mu=np.array([1.57297316e+01, 2.90711127e+01, 4.87581738e+01, 6.73504540e+01,1.09362028e+02, 1.46251356e+02, 2.05310203e+02, 3.07485194e+02,4.11188634e+02, 5.58866962e+02, 7.47366380e+02, 9.36836624e+02,1.10071444e+03, 1.25213283e+03, 1.40147038e+03, 1.51873631e+03,1.54265765e+03, 1.46888096e+03, 1.33222323e+03, 1.18897999e+03,9.94590641e+02, 7.07752250e+02, 4.64495078e+02, 2.90404734e+02,1.81555668e+02, 8.76217619e+01, 2.82213867e+01, 2.33546067e+00,1.36123690e-02])
NOE_anu_mu=np.array([6.78198855e+00, 1.06626331e+01, 1.52119330e+01, 2.31538833e+01,3.88330399e+01, 5.45144983e+01, 7.77765028e+01, 1.04011596e+02,1.55771215e+02, 2.04972120e+02, 2.65390178e+02, 3.32664855e+02,3.90871657e+02, 4.44632997e+02, 4.66479074e+02, 5.05511010e+02,4.65993316e+02, 4.36554092e+02, 3.71136481e+02, 3.25915811e+02,2.35700148e+02, 1.65033072e+02, 1.04856327e+02, 5.94936856e+01,3.01410623e+01, 1.15984530e+01, 2.53365903e+00, 1.96534742e-01,1.03398021e-02])
NOE_nu_tau=np.array([0,0,0,0,0,0.01874182, 0.03194771, 0.06098968, 0.10064869, 0.14831593,0.25281775, 0.36069135, 0.49820048, 0.66623779, 0.86260325,1.04690271, 1.23008064, 1.46882531, 1.22863679, 1.22807833,1.26778976, 1.207067  , 0.96190491, 0.7542358 , 0.4143083 ,0.08762176, 0.02962538, 0.01034568,0])
NOE_anu_tau=np.array([0.,  0.,  0.,  0.,  0,0.,0.01250126, 0.02348118, 0.04134119, 0.07046709, 0.1021759 ,0.14815868, 0.21481905, 0.29672741, 0.37194587, 0.45875866,0.51347322, 0.65418193, 0.66446066, 0.65343882, 0.66374359,0.6319765 , 0.58250631, 0.43514226, 0.23140875, 0.03599383,0.01018467,0,0])

error_nu_e=np.array([ 0.06010197,  0.13686919,  0.14413986,  0.31585541,  0.44951193,0.81341103,  1.12215827,  1.5970655 ,  2.40870915,  3.09638285,4.00075686,  5.73209284,  6.88401667,  8.67458565,  9.87177582,9.97604059,  9.08955742,  1.4663596 ,  7.32908565,  8.91221683,10.65589565, 12.02088107, 14.35827639, 14.21450406, 10.87737217,5.01658695])
error_anu_e=np.array([0.01886855, 0.03798596, 0.06938694, 0.08979371, 0.20739026,0.24447667, 0.49230135, 0.74770917, 0.98552868, 1.62211498,2.06890429, 2.8194659 , 3.36225687, 4.02740119, 4.17435403,5.60410664, 6.58791925, 5.72522613, 7.74874093, 6.21906031,5.73681847, 5.7102524 , 5.61543468, 5.05913945, 3.33261433,1.48375052])
error_nu_mu=np.array([  5.26309661,   9.2886822 ,   8.53405061,  21.50169631,25.89189686,  30.35736807,  60.94175483,  86.69563099,100.80999161, 139.45618956, 216.81392707, 246.91040507,274.84477141, 298.46693501, 245.03040856, 224.16530512,189.91045011, 117.38780823,  12.63156744,  45.64073183,63.06436977,  54.42705767,  61.54147505,  52.78117508,42.69613389,  28.74856232,  12.75476081,   2.64598553])
error_anu_mu=np.array([  1.89744414,   4.29389988,   4.79142345,   6.488422  ,12.76617803,  13.63790338,  22.46412827,  34.54795779,44.78852002,  73.7706777 ,  82.1142692 ,  98.72249891,115.62880185, 119.6133617 , 123.88264025, 101.22362344,84.78162779,  60.60692089,  32.4375426 ,   8.78400274,1.36529942,   1.38981931,   3.74754099,   5.57792277,3.97022648,   2.91735585,   1.22310499,   0.17237009])
error_nu_tau=np.array([1,1,1,1,1,0.00205457, 0.00411044, 0.00974363, 0.01431415, 0.02511418,0.03582263, 0.08113121, 0.11518134, 0.15818621, 0.18668311,0.22884619, 0.26805622, 0.32485467, 0.23796771, 0.14260175,0.1033927 , 0.08069272, 0.20260751, 0.35192843, 0.4231112 ,0.30625827, 0.10117743,1])
error_anu_tau=np.array([1,1,1,1,1,1,0.0028923 , 0.00409168, 0.0077492 , 0.01585756, 0.03165525,0.0368245 , 0.05888465, 0.0794466 , 0.04911807, 0.02246036,0.07677409, 0.16902416, 0.13035948, 0.13901388, 0.18987081,0.21526638, 0.27410598, 0.27159881, 0.15847418,1,1,1])


# # ========================== BSM =============================

# In[90]:


muli_fac = 10.0**7.0


# In[91]:


@numba.jit()
def dN2dE_nu_z_decay( En, mp, mV, Ep): #nu_spectrum
    '''
    
    '''

    dNtodE=(np.power(En,-2)*np.power(Ep,-1)*np.power(mp,-3)*np.power(mV,-2)*
         (En*Ep*(-(np.power(Ep,-2)*np.power(mp,2))/2. - (np.power(Ep,-4.)*np.power(mp,4))/8.) - np.power(mV,2))*
         np.power(np.pi,-3)*np.power(-(np.power(Ep,-2)*np.power(mp,2))/2. - (np.power(Ep,-4)*np.power(mp,4))/8.,-1)*
         np.power(np.power(mp,2) + 2*En*Ep*(-(np.power(Ep,-2)*np.power(mp,2))/2. - 
              (np.power(Ep,-4.)*np.power(mp,4))/8.),2)*
         np.power(2*En*Ep*(-(np.power(Ep,-2)*np.power(mp,2))/2. - (np.power(Ep,-4.)*np.power(mp,4))/8.) + 
           np.power(mV,2),2))/512;



    if (dNtodE == np.NaN):
        dNtodE = 0
    if (dNtodE.real != dNtodE):
        dNtodE = 0

    if(dNtodE < 0):
        dNtodE=0


    return dNtodE


# In[92]:


@numba.njit()
def dN2dE_nu_pion3_decay(En, mp, mV, Ep): #nu_spectrum_piondecay
     

    dNtodE=-(pow(En,2)*pow(Ep,3)*pow(mp,-3)*(pow(mp,2) + 2*pow(mV,2) +             2*En*Ep*(-1 + pow(1 - pow(Ep,-2)*pow(mp,2),0.5)))*pow((mp - mV)*(mp + mV) +            2*En*Ep*(-1 + pow(1 - pow(Ep,-2)*pow(mp,2),0.5)),2)*             pow(mV*pow(mp,2) + 2*En*Ep*mV*(-1 + pow(1 - pow(Ep,-2)*pow(mp,2),0.5)),-2)            *pow(-1 + pow(1 - pow(Ep,-2)*pow(mp,2),0.5),3))


    if (dNtodE == np.NaN):
        dNtodE = 0
        
    if (dNtodE.real != dNtodE):
        dNtodE = 0

    if(dNtodE < 0):
        dNtodE = 0


    return dNtodE


# # Z' decays and Pion and Kaon 3 body decay

# ### Z' decays

# ### BSM_spectrum_z_decay_pp & total_number_BSM_spectrum_z_decay_pp

# In[93]:


# boro bala
@numba.njit(parallel=True, fastmath = True)
def flux_FASER_pion_p(energy):

    mp = 0.13957018
    mmu = 0.1056583745
    nu_energy=energy*(1-mmu*mmu/(mp*mp))

    return flux_pion_nu_mu(nu_energy)


# In[94]:







# ### BSM_spectrum_z_decay_pn & total_number_BSM_spectrum_z_decay_pn

# In[96]:


@numba.njit(parallel=True, fastmath = True)
def flux_FASER_pion_n(energy):

    mp = 0.13957018
    mmu = 0.1056583745
    nu_energy=energy*(1-mmu*mmu/(mp*mp))

    return flux_pion_anu_mu(nu_energy)






# ### BSM_spectrum_z_decay_kp & total_number_BSM_spectrum_z_decay_kp

# In[99]:


@numba.njit(parallel=True, fastmath = True)
def flux_FASER_kaon_p(energy):

    mk = 0.493677
    mmu = 0.1056583745
    nu_energy = energy*(1-mmu*mmu/(mk*mk))

    return flux_kaon_nu_mu(nu_energy)





# In[102]:


@numba.njit(parallel=True, fastmath = True)
def flux_FASER_kaon_n(energy):

    mk = 0.493677
    mmu = 0.1056583745
    nu_energy = energy*(1-mmu*mmu/(mk*mk))

    return flux_kaon_anu_mu(nu_energy)







# # Pion  3 body decay

# ### total_number_BSM_spectrum_pion_p_nu

# In[105]:


@numba.njit(parallel=True, fastmath = True)
def BSM_spectrum_pion_p_nu(mV, En, mp): #spectrum_nu_piondecay # POIN DECAY

    """    
        calculation of the anti-neutrino spectrum from decay of the vector boson,
        which is produced from decay of pion->e+nu_e+V and V->nu+anu
        if polarized ==0 it is not polarized else it is polaried 
    """
    
    gsum = 0.0
    
    energy_pionspectrum = 10**np.arange(1,4.001,0.001) 
    pionspectrum = flux_FASER_pion_p(energy_pionspectrum)
    
    if (En< 6000.0001):
        for i in range(len(pionspectrum)):
            if(En<(energy_pionspectrum[i]*0.99)):
                gsum = gsum+dN2dE_nu_pion3_decay(En, mp, mV, energy_pionspectrum[i])*pionspectrum[i]



    return gsum


# In[106]:


@numba.njit(parallel=True, fastmath = True)
def total_number_BSM_spectrum_pion_p_nu(mV, mp):


    gsum=0


    for energy in np.arange(10.0, 5000.0, 0.25):
        gsum = gsum + BSM_spectrum_pion_p_nu(mV,energy,mp)

    return gsum


# ### total_number_BSM_spectrum_pion_n_anu

# In[107]:


@numba.njit(parallel=True, fastmath = True)
def BSM_spectrum_pion_n_anu(mV, En, mp): #spectrum_nu_piondecay # POIN DECAY

    """    
        calculation of the anti-neutrino spectrum from decay of the vector boson,
        which is produced from decay of pion->e+nu_e+V and V->nu+anu
        if polarized ==0 it is not polarized else it is polaried 
    """
    
    gsum = 0.0
    
    energy_pionspectrum = 10**np.arange(1,4.001,0.001) 
    pionspectrum = flux_FASER_pion_n(energy_pionspectrum)
    
    if (En< 6000.0001):
        for i in range(len(pionspectrum)):
            if(En<(energy_pionspectrum[i]*0.99)):
                gsum = gsum + dN2dE_nu_pion3_decay(En, mp, mV, energy_pionspectrum[i])*pionspectrum[i]



    return gsum


# In[108]:


@numba.njit(parallel=True, fastmath = True)
def total_number_BSM_spectrum_pion_n_anu(mV, mp):


    gsum=0


    for energy in np.arange(10.0, 5000.0, 0.25):
        gsum = gsum + BSM_spectrum_pion_n_anu(mV,energy,mp)

    return gsum


# # Kaon 3 body decay

# ### total_number_BSM_spectrum_kaon_p_nu

# In[109]:


@numba.njit(parallel=True, fastmath = True)
def BSM_spectrum_kaon_p_nu(mV, En, mk): #spectrum_nu_piondecay # POIN DECAY

    """    
        calculation of the anti-neutrino spectrum from decay of the vector boson,
        which is produced from decay of pion->e+nu_e+V and V->nu+anu
        if polarized ==0 it is not polarized else it is polaried 
    """
    
    gsum = 0.0
    
    energy_pionspectrum = 10**np.arange(1,4.001,0.001) 
    pionspectrum = flux_FASER_kaon_p(energy_pionspectrum)
    
    if (En< 6000.0001):
        for i in range(len(pionspectrum)):
            if(En<(energy_pionspectrum[i]*0.99)):
                gsum = gsum+dN2dE_nu_pion3_decay(En, mk, mV, energy_pionspectrum[i])*pionspectrum[i]



    return gsum


# In[110]:


@numba.njit(parallel=True, fastmath = True)
def total_number_BSM_spectrum_kaon_p_nu(mV, mk):


    gsum=0


    for energy in np.arange(10.0, 5000.0, 0.25):
        gsum = gsum + BSM_spectrum_kaon_p_nu(mV,energy,mk)

    return gsum


# ### total_number_BSM_spectrum_kaon_n_anu

# In[111]:


@numba.njit(parallel=True, fastmath = True)
def BSM_spectrum_kaon_n_anu(mV, En, mk): #spectrum_nu_piondecay # POIN DECAY

    """    
        calculation of the anti-neutrino spectrum from decay of the vector boson,
        which is produced from decay of pion->e+nu_e+V and V->nu+anu
        if polarized ==0 it is not polarized else it is polaried 
    """
    
    gsum = 0.0
    
    energy_pionspectrum = 10**np.arange(1,4.001,0.001) 
    pionspectrum = flux_FASER_kaon_n(energy_pionspectrum)
    
    if (En< 6000.0001):
        for i in range(len(pionspectrum)):
            if(En<(energy_pionspectrum[i]*0.99)):
                gsum = gsum+dN2dE_nu_pion3_decay(En, mk, mV, energy_pionspectrum[i])*pionspectrum[i]



    return gsum


# In[112]:


@numba.njit(parallel=True, fastmath = True)
def total_number_BSM_spectrum_kaon_n_anu(mV, mk):


    gsum=0


    for energy in np.arange(10.0, 5000.0, 0.25):
        gsum = gsum + BSM_spectrum_kaon_n_anu(mV,energy,mk)

    return gsum


# In[113]:


@numba.njit()
def decay_rate(mV, mp):

    if(mV<mp):
        drate=(np.power(mp,-3)*np.power(mV,-2)*(np.power(mp,8) + 72*np.power(mp,4)*np.power(mV,4) - 64*np.power(mp,2)*np.power(mV,6) + 24*np.log(mV*np.power(mp,-1))*(3*np.power(mp,4)*np.power(mV,4) + 4*np.power(mp,2)*np.power(mV,6)) - 9*np.power(mV,8))*np.power(np.pi,-3))/6144;


    return drate


# # total_number_numu is ok?

# ###  We are going to compute these fluxes
# * flux_nu_e_gee(mV, En)
# * flux_anu_e_gee(mV, En)
# * flux_nu_e_get(mV, En)
# * flux_anu_e_get(mV, En)
# * flux_nu_tau_get(mV, En)
# * flux_anu_tau_get(mV, En)

# In[114]:


# Pion +
@numba.njit()
def flux_nu_pp(mV, En, mp, Gamma_SM_pp , total_num_3pion_decay_pp, pn, nu_anu, ee_et):
    
    
    total_number_numu = 142731494.88680023
    nf_pion3 = total_number_numu * decay_rate(mV, mp)/(total_num_3pion_decay_pp* Gamma_SM_pp)
    
    if ((pn == 'P' and nu_anu == 'nu') or (pn == 'N' and nu_anu == 'anu')):
        a1 = 1
    else:
        a1 = 0
        
    if (ee_et == 'ee'):
        a0 = 1
    else:
        a0 = 0.5
        
    return  a1*nf_pion3*BSM_spectrum_pion_p_nu(mV, En, mp)


    


# In[115]:


#  Pion - 
@numba.njit()
def flux_nu_pn(mV, En, mp, Gamma_SM_pn , total_num_3pion_decay_pn, pn, nu_anu, ee_et):
    

    total_number_numu = 93483093.81984755
    nf_pion3 = total_number_numu * decay_rate(mV, mp)/(total_num_3pion_decay_pn* Gamma_SM_pp)
    
    
    if ((pn == 'P' and nu_anu == 'nu') or (pn == 'N' and nu_anu == 'anu')):
        a1 = 1
    else:
        a1 = 0
        
    if (ee_et == 'ee'):
        a0 = 1
    else:
        a0 = 0.5
        
    return a1*nf_pion3*BSM_spectrum_pion_n_anu(mV, En, mp)


# In[116]:


# k+
@numba.jit()
def flux_nu_kp(mV, En, mk, Gamma_SM_kp , total_num_3kaon_decay_kp, pn, nu_anu, ee_et):
    
    
    total_number_numu = 49321458.411101565
    nf_pion3 = total_number_numu * decay_rate(mV, mp)/(total_num_3kaon_decay_kp* Gamma_SM_pp)
    
    
    if ((pn == 'P' and nu_anu == 'nu') or (pn == 'N' and nu_anu == 'anu')):
        a1 = 1
    else:
        a1 = 0
        
    if (ee_et == 'ee'):
        a0 = 1
    else:
        a0 = 0.5
        
    return  a1*nf_pion3*BSM_spectrum_kaon_p_nu(mV, En, mk)


# In[117]:


# K-
@numba.jit()
def flux_nu_kn(mV, En, mk, Gamma_SM_kn , total_num_3kaon_decay_kn, pn, nu_anu, ee_et):
    
    
    total_number_numu = 26164874.491753496
    nf_pion3 = total_number_numu * decay_rate(mV, mp)/(total_num_3kaon_decay_kn* Gamma_SM_pp)
    
    
    if ((pn == 'P' and nu_anu == 'nu') or (pn == 'N' and nu_anu == 'anu')):
        a1 = 1
    else:
        a1 = 0
        
    if (ee_et == 'ee'):
        a0 = 1
    else:
        a0 = 0.5
        
    return a1*nf_pion3*BSM_spectrum_kaon_n_anu(mV, En, mk)


# ## $g_{ee} = 1$:

# ##### $\phi_{\nu_e} = \phi_{\pi^{+}}(\bar{\nu})+\phi_{\kappa^{+}}(\bar{\nu})+\phi_{\pi^{-}}({\nu})+\phi_{\pi^{-}}({\nu})$

# In[118]:


def flux_nu_e_gee(mV, En):
    
    res = flux_nu_pp(mV, En, mp, Gamma_SM_pp , total_num_3pion_decay_pp, 'P','nu','ee')+     flux_nu_pn(mV, En, mp, Gamma_SM_pn , total_num_3pion_decay_pn, 'N','nu','ee')+     flux_nu_kp(mV, En, mk, Gamma_SM_kp , total_num_3kaon_decay_kp, 'P','nu','ee')+     flux_nu_kn(mV, En, mk, Gamma_SM_kn , total_num_3kaon_decay_kn, 'N','nu','ee') 
    
    return  res

flux_nu_e_gee =  np.vectorize(flux_nu_e_gee, excluded=['mV'])


# # This is not correct
# ##### $\phi_{\nu_e} = \phi_{\pi^{+}}(\bar{\nu})+\phi_{\kappa^{+}}(\bar{\nu})+\phi_{\pi^{-}}({\nu})+\phi_{\pi^{-}}({\nu})$

# In[119]:


def flux_anu_e_gee(mV, En):
    res = flux_nu_pp(mV, En, mp, Gamma_SM_pp , total_num_3pion_decay_pp, 'P','anu','ee')+     flux_nu_pn(mV, En, mp, Gamma_SM_pn , total_num_3pion_decay_pn, 'N','anu','ee')+     flux_nu_kp(mV, En, mk, Gamma_SM_kp , total_num_3kaon_decay_kp, 'P','anu','ee')+     flux_nu_kn(mV, En, mk, Gamma_SM_kn , total_num_3kaon_decay_kn, 'N','anu','ee')
    
    return  res

flux_anu_e_gee =  np.vectorize(flux_anu_e_gee, excluded=['mV'])


# # $g_{et}$:

# ##### $\phi_{\nu_e} = \phi_{\pi^{+}}(\bar{\nu})+\phi_{\kappa^{+}}(\bar{\nu})+\phi_{\pi^{-}}({\nu})+\phi_{\pi^{-}}({\nu})$
# #####  $\bar{\phi}_{\nu_e} =  \phi_{\nu_e}$

# In[120]:


def flux_nu_e_get(mV, En) :
    res = flux_nu_pp(mV, En, mp, Gamma_SM_pp , total_num_3pion_decay_pp, 'P','anu','et')+     flux_nu_pn(mV, En, mp, Gamma_SM_pn , total_num_3pion_decay_pn, 'N','nu','et')+     flux_nu_kp(mV, En, mk, Gamma_SM_kp , total_num_3kaon_decay_kp, 'P','anu','et')+     flux_nu_kn(mV, En, mk, Gamma_SM_kn , total_num_3kaon_decay_kn, 'N','nu','et')
    
    return res

flux_nu_e_get = np.vectorize(flux_nu_e_get, excluded=['mV'])


# In[121]:


flux_anu_e_get = flux_nu_e_get


# ##### $\phi_{\nu_{\tau}} = \phi_{\pi^{+}}({\nu})+\phi_{\kappa^{+}}({\nu})+\phi_{\pi^{-}}({\nu})+\phi_{\pi^{-}}({\nu})$

# In[122]:


def flux_nu_tau_get(mV, En):
    res = flux_nu_pp(mV, En, mp, Gamma_SM_pp , total_num_3pion_decay_pp, 'P','nu','et')+     flux_nu_pn(mV, En, mp, Gamma_SM_pn , total_num_3pion_decay_pn, 'N','nu','et')+      flux_nu_kp(mV, En, mk, Gamma_SM_kp , total_num_3kaon_decay_kp, 'P','nu','et')+     flux_nu_kn(mV, En, mk, Gamma_SM_kn , total_num_3kaon_decay_kn, 'N','nu','et')
    
    return  res

flux_nu_tau_get = np.vectorize(flux_nu_tau_get, excluded=['mV'])


# #####  $\phi_{\bar{\nu}_{\tau}} = \phi_{\pi^{+}}(\bar{\nu})+\phi_{\kappa^{+}}(\bar{\nu})+\phi_{\pi^{-}}(\bar{\nu})+\phi_{\pi^{-}}(\bar{\nu})$

# In[123]:


def flux_anu_tau_get(mV, En):
    res = flux_nu_pp(mV, En, mp, Gamma_SM_pp , total_num_3pion_decay_pp, 'P','anu','et')+      flux_nu_pn(mV, En, mp, Gamma_SM_pn , total_num_3pion_decay_pn, 'N','anu','et')+      flux_nu_kp(mV, En, mk, Gamma_SM_kp , total_num_3kaon_decay_kp, 'P','anu','et')+     flux_nu_kn(mV, En, mk, Gamma_SM_kn , total_num_3kaon_decay_kn, 'N','anu','et')
    
    return  res

flux_anu_tau_get = np.vectorize(flux_anu_tau_get, excluded=['mV'])


# In[124]:


#energy_nu = 10**np.arange(1, 3.69905685454766, 0.01)
energy_nu = np.arange(10,5001, 1.)


# In[125]:


Gamma_SM_pp = decay_rate_SM(mp, mm)
Gamma_SM_pn = Gamma_SM_pp


# In[126]:


Gamma_SM_kp = decay_rate_SM(mk, mm)
Gamma_SM_kn = Gamma_SM_kp


# # Number of Event (NOE)

# # SM

# ### $\nu_e$ and $\bar{\nu}_e$ 
# 

# In[127]:


# energy_nu = 10**np.arange(1, 3.69905685454766, 0.001)


# In[128]:


energy_nu = np.arange(10,5001, 1)

#=======================================================================================
# ## ================================ SM
#=======================================================================================

# SM nu_e 
NOE_SM_nu_e = number_of_events(energy_nu,
                               NOE_energy_bin,
                               cross_section_nu_e_mu(energy_nu),
                               1,
                               flux_nu_e(energy_nu),
                               nf_e)


save2txt(mV, 'NOE_SM_nu_e', NOE_SM_nu_e, out_put_dir = './wiz')


# In[131]:


# SM anu_e 
NOE_SM_anu_e = number_of_events(energy_nu,
                                NOE_energy_bin,
                                cross_section_anu_e_mu(energy_nu),
                                1,
                                flux_anu_e(energy_nu),
                                nf_e)

save2txt(mV, 'NOE_SM_anu_e', NOE_SM_anu_e, out_put_dir = './wiz')


# #### $\nu_{\tau}$ and $\bar{\nu}_{\tau}$ 

# In[132]:


# SM nu_t 
NOE_SM_nu_tau = number_of_events(energy_nu,
                                NOE_energy_bin,
                                cross_section_nu_tau(energy_nu),
                                1,
                                flux_nu_tau(energy_nu),
                                nf_tau)

save2txt(mV, 'NOE_SM_nu_tau', NOE_SM_nu_tau, out_put_dir = './wiz')


# In[133]:


# SM anu_t
NOE_SM_anu_tau = number_of_events(energy_nu,
                                NOE_energy_bin,
                                cross_section_anu_tau(energy_nu),
                                1,
                                flux_anu_tau(energy_nu),
                                nf_tau)

save2txt(mV, 'NOE_SM_anu_tau', NOE_SM_anu_tau, out_put_dir = './wiz')




#mVs = np.arange(0.0000000001, 0.001, 0.00025)
mVs = 10.0**np.linspace(-9, -2, 140)
for mV in mVs:
    print("running code for mV=%.9f\n"%mV)





    # In[ ]:





    # In[138]:


    total_num_3pion_decay_pp = total_number_BSM_spectrum_pion_p_nu(mV, mp)


    # In[139]:


    total_num_3pion_decay_pn = total_number_BSM_spectrum_pion_n_anu(mV, mp)


    # In[ ]:





    # In[140]:


    total_num_3kaon_decay_kp = total_number_BSM_spectrum_kaon_p_nu(mV, mk)


    # In[141]:


    total_num_3kaon_decay_kn = total_number_BSM_spectrum_kaon_n_anu(mV, mk)


    # In[ ]:





    # ## ============================== BSM

    # ###  gee = 1

    # $\nu_e$ and $\bar{\nu}_e$ 

    # In[142]:


    NOE_BSM_nu_e_mu_gee = number_of_events(energy_nu,
                                            NOE_energy_bin,
                                            cross_section_nu_e_mu(energy_nu),
                                            1,
                                            flux_nu_e_gee(mV, energy_nu),
                                            nf_e)

    save2txt(mV, 'NOE_BSM_nu_e_mu_gee', NOE_BSM_nu_e_mu_gee, out_put_dir = './wiz')


    # In[143]:


    NOE_BSM_anu_e_mu_gee = number_of_events(energy_nu,
                                        NOE_energy_bin,
                                        cross_section_anu_e_mu(energy_nu),
                                        1,
                                        flux_anu_e_gee(mV, energy_nu),
                                        nf_e)

    save2txt(mV, 'NOE_BSM_anu_e_mu_gee', NOE_BSM_anu_e_mu_gee, out_put_dir = './wiz')


    # ### get = 1

    # $\nu_e$ and $\bar{\nu}_e$ 

    # In[144]:


    NOE_BSM_nu_e_mu_get = number_of_events(energy_nu,
                                        NOE_energy_bin,
                                        cross_section_nu_e_mu(energy_nu),
                                        1,
                                        flux_nu_e_get(mV, energy_nu),
                                        nf_e)

    save2txt(mV, 'NOE_BSM_nu_e_mu_get', NOE_BSM_nu_e_mu_get, out_put_dir = './wiz')


    # In[145]:


    NOE_BSM_anu_e_mu_get = number_of_events(energy_nu,
                                        NOE_energy_bin,
                                        cross_section_anu_e_mu(energy_nu),
                                        1,
                                        flux_anu_e_get(mV, energy_nu),
                                        nf_e)

    save2txt(mV, 'NOE_BSM_anu_e_mu_get', NOE_BSM_anu_e_mu_get, out_put_dir = './wiz')


    # #### $\nu_{\tau}$ and $\bar{\nu}_{\tau}$ 

    # In[146]:


    NOE_BSM_nu_tau_mu_get = number_of_events(energy_nu,
                                            NOE_energy_bin,
                                            cross_section_nu_tau(energy_nu),
                                            1,
                                            flux_nu_tau_get(mV, energy_nu),
                                            nf_tau)

    save2txt(mV, 'NOE_BSM_nu_tau_mu_get', NOE_BSM_nu_tau_mu_get, out_put_dir = './wiz')


    # In[147]:


    NOE_BSM_anu_tau_mu_get = number_of_events(energy_nu,
                                            NOE_energy_bin,
                                            cross_section_anu_tau(energy_nu),
                                            1,
                                            flux_anu_tau_get(mV, energy_nu),
                                            nf_tau)

    save2txt(mV, 'NOE_BSM_anu_tau_mu_get', NOE_BSM_anu_tau_mu_get, out_put_dir = './wiz')







